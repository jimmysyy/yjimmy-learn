import{_ as n,p as s,q as a,a1 as t}from"./framework-5866ffd3.js";const p={},e=t(`<p>这是js开始认真学习的第一天，前段时间把黑马vue的快速入门看了之后，发现vue是如此的有意思，所以痛下决心一定要学好js。 正好之前把html+css的教程看完后，随便看了一点js的入门，而且js前面部分的语法和其他语言有不少共同之处，于是从对象这里开始入手，笔记也就从这部分开始作。</p><h2 id="一、object-对象" tabindex="-1"><a class="header-anchor" href="#一、object-对象" aria-hidden="true">#</a> 一、Object 对象</h2><p>对象属于一种符合的数据类型，在对象中可以保存多个不同数据类型的属性</p><p>创建对象:使用new关键字调用的函数，是构造函数constructor</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在对象中保存的值称为属性</p><p><strong>语法:对象.属性名 = 属性值；</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;孙悟空&quot;</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.读取对象中的属性：<strong>对象.属性名</strong></p><p>2.修改对象的属性值：<strong>对象.属性名 = 新值</strong></p><p>3.删除对象的属性：<strong>delete 对象.属性名</strong></p><h2 id="二、属性名和属性值" tabindex="-1"><a class="header-anchor" href="#二、属性名和属性值" aria-hidden="true">#</a> 二、属性名和属性值</h2><p>属性名：对象的属性名不强制要求遵守标识符的规范，什么乱七八糟的名字都可以使用，但是我们使用是还是尽量按照标识符的规范去做</p><p>如果要使用特殊的属性名，不能采用.的方式来操作，需要使用另一种方式：</p><p><strong>语法：对象[&quot;属性名&quot;] = 属性值</strong></p><p>使用 [] 这种形式去操作属性，更加的灵活，在 [] 中可以直接传递一个变量，这样变量值是多少就会读取那个属性，读取时也需要采用这种方式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>obj<span class="token punctuation">[</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">789</span><span class="token punctuation">;</span>
obj<span class="token punctuation">[</span><span class="token string">&quot;nihao&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;你好&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>属性值：JS对象的属性值，可以是任意的数据类型，甚至也可以是一个对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>obj<span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>in 运算符:通过该运算符可以检查一个对象中是否含有指定的属性，如果有则返回true，没有则返回false</p><p><strong>语法： &quot;属性名&quot; in 对象</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span> <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="三、基本和引用数据类型" tabindex="-1"><a class="header-anchor" href="#三、基本和引用数据类型" aria-hidden="true">#</a> 三、基本和引用数据类型</h2><p>基本数据类型：String Number Boolean Null Undefined</p><p>引用数据类型：Object</p><p>JS中的变量都是保存到栈内存中的，基本数据类型的值直接在栈内存中存储，值与值之间是独立存在，修改一个变量不会影响其他的变量</p><p><strong>对象是保存到堆内存中的，每创建一个新的对象，就会在堆内存中开辟出一个新的空间，而变量保存的是对象的内存地址（对象的引用），如果两个变量保存的是同一个对象引用，当一个通过一个变量修改属性时，另一个也会受到影响</strong></p><h2 id="四、对象字面量" tabindex="-1"><a class="header-anchor" href="#四、对象字面量" aria-hidden="true">#</a> 四、对象字面量</h2><p>使用对象字面量来创建一个对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;swk&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用对象字面量，可以在创建对象时，直接指定对象中的属性</p><p><strong>语法：{属性名:属性值,属性名:属性值....}</strong></p><p>对象字面量的属性名可以加引号也可以不加，建议不加，如果要使用一些特殊的名字，则必须加引号</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;swk&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token literal-property property">gender</span><span class="token operator">:</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;shs&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>属性名和属性值是一组一组的名值对结构，名和值之间使用:连接，多个名值对之间使用，隔开，如果一个属性之后没有其他的属性了，就不要写</p><h2 id="五、函数" tabindex="-1"><a class="header-anchor" href="#五、函数" aria-hidden="true">#</a> 五、函数</h2><p>函数 function</p><ul><li><p>函数也是一个对象</p></li><li><p>函数中可以封装一些功能（代码），在需要时可以执行这些功能（代码）</p></li><li><p>函数中可以保存一些代码在需要的时候调用</p></li><li><p>使用typeof检查一个函数对象时，会返回function</p></li></ul><p><strong>我们在实际开发中很少使用构造函数来创建一个函数对象</strong>，创建一个函数对象，可以将要封装的代码以字符串的形式传递给构造函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">function</span><span class="token punctuation">(</span>
<span class="token string">&quot;console.log(&#39;hello, this is one&#39;);&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>封装到函数中的代码不会立即执行，函数中的代码会在函数调用的时候执行，当调用函数时，函数中封装的代码会按照顺序执行</p><p><strong>调用函数 语法：函数对象()</strong></p><p><strong>使用 函数声明 来创建一个函数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>语法：
	<span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>形参<span class="token number">1</span>，形参<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>形参<span class="token constant">N</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		语句
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;this is two&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;hhhhhh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;_&lt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 函数表达式 来创建一个函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">函数名</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>形参<span class="token number">1</span><span class="token punctuation">,</span>形参<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>形参<span class="token constant">N</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    语句<span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、函数的参数" tabindex="-1"><a class="header-anchor" href="#六、函数的参数" aria-hidden="true">#</a> 六、函数的参数</h2><p>可以在函数的()中来指定一个或多个形参（形式参数）</p><p>多个形参之间使用,隔开，声明形参就相当于在函数内部声明了对应的变量，但是并不赋值</p><p>在调用函数时，可以在()中指定实参（实际参数），实参将会赋值给函数中对应的形参</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>代码
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">consolelog</span><span class="token punctuation">(</span><span class="token string">&quot;a = &quot;</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;b = &quot;</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
调用
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用函数时解析器不会检查实参的类型，所以要注意，是否有可能会接收到非法的参数，如果有可能则需要对参数进行类型的检查，函数的实参可以是任意的数据类型</p><p>调用函数时，解析器也不会检查实参的数量，多余实参不会被赋值，如果实参的数量少于形参的数量，则没有对应实参的形参将是undefined</p>`,53),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","day1.html.vue"]]);export{r as default};
