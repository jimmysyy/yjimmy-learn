import{_ as n,p as s,q as a,a1 as p}from"./framework-5866ffd3.js";const t={},e=p(`<h2 id="一、call-和apply" tabindex="-1"><a class="header-anchor" href="#一、call-和apply" aria-hidden="true">#</a> 一、call()和apply()</h2><p>call()和apply() 不理解了</p><ul><li><p>这两个方法都是函数对象的方法，需要通过函数对象来调用</p></li><li><p>当对函数调用call()和apply()都会调用函数执行</p></li><li><p>在调用call()和apply()可以将一个对象指定为第一个参数</p><p><strong>此时这个对象将会成为函数执行时的this</strong></p></li><li><p>call()方法可以将实参在对象之后依次传递</p></li><li><p>apply()方法需要将实参封装到一个数组中统一传递</p></li><li><p>this的情况：</p><p>1.以函数形式调用时，this永远都是window</p><p>2.以方法的形式调用时，this是调用方法的对象</p><p>3.以构造函数的形式调用时，this是新创建的那个对象</p><p>4.使用call和apply调用时，this是指定的那个对象</p></li></ul><p><strong>注1 call()：</strong></p><p><code>call()</code> 方法是预定义的 JavaScript 方法。</p><p>它可以用来调用所有者对象作为参数的方法。</p><p><strong>通过 <code>call()</code>，您能够使用属于另一个对象的方法。</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//本例调用 person 的 fullName 方法，并用于 person1：</span>
<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">fullName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">firstName</span><span class="token operator">:</span><span class="token string">&quot;Bill&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&quot;Gates&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">firstName</span><span class="token operator">:</span><span class="token string">&quot;Steve&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&quot;Jobs&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
person<span class="token punctuation">.</span><span class="token function">fullName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将返回 &quot;Bill Gates&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>带参数的call()方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//call() 方法可接受参数：</span>
<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">fullName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">city<span class="token punctuation">,</span> country</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> city <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> country<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">firstName</span><span class="token operator">:</span><span class="token string">&quot;Bill&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&quot;Gates&quot;</span>
<span class="token punctuation">}</span>
person<span class="token punctuation">.</span><span class="token function">fullName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span> <span class="token string">&quot;Seattle&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;USA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注2 apply():</strong></p><p><strong>call() 和 apply() 之间的区别</strong></p><p>不同之处是：</p><p>1.<code>call()</code> 方法分别接受参数。</p><p>2.<code>apply()</code> 方法接受数组形式的参数。</p><p><strong>如果要使用数组而不是参数列表，则 <code>apply()</code> 方法非常方便。</strong></p><h2 id="二、arguments" tabindex="-1"><a class="header-anchor" href="#二、arguments" aria-hidden="true">#</a> 二、arguments</h2><p>在调用函数时，浏览器每次都会传递进两个隐含的参数：</p><p>1.函数的上下文对象 this</p><p>2.封装实参的对象 arguments</p><ul><li><p><strong>arguments是一个类数组对象,它也可以通过索引来操作数据，也可以获取长度</strong></p></li><li><p>在调用函数时，我们所传递的实参都会在arguments中保存</p></li><li><p>arguments.length可以用来获取实参的长度</p></li><li><p>我们即使不定义形参，也可以通过arguments来使用实参，只不过比较麻烦</p><p>arguments[0] 表示第一个实参</p><p>arguments[1] 表示第二个实参 。。。</p></li><li><p><strong>它里边有一个属性叫做callee，这个属性对应一个函数对象，就是当前正在指向的函数的对象</strong></p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments <span class="token keyword">instanceof</span> <span class="token class-name">Affay</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//false 不是一个数组</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//false 不是一个数组</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//函数中传递多少个实参，长度就是多少</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//不定义形参，也可以通过arguments来使用实参</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee <span class="token operator">==</span> fun<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、data对象" tabindex="-1"><a class="header-anchor" href="#三、data对象" aria-hidden="true">#</a> 三、data对象</h2><p>Date对象：在JS中使用Date对象来表示一个时间</p><p>1.创建一个Date对象</p><p>如果直接使用构造函数创建一个Date对象，则会封装为当前代码执行的时间</p><p>2.创建一个指定的时间对象</p><p>需要在构造函数中传递一个表示时间的字符串作为参数:日期的格式 月份/日/年 时:分:秒</p><p>3.getDate()</p><p>获取当前日期对象是几日</p><p>4.getDay()</p><p>获取当前日期对象时周几(会返回一个0-6的值,0 表示周日,1表示周一)</p><p>5.getMonth()</p><p>获取当前时间对象的月份(会返回一个0-11的值,0 表示1月,1 表示2月)</p><p>6.getFullYear()</p><p>获取当前日期对象的年份</p><p>7.getTime()</p><ul><li>获取当前日期对象的时间戳</li><li>时间戳，指的是从格林威治标准时间的1970年1月1日，0时0分0秒到当前日期所花费的毫秒数（1秒 = 1000毫秒）</li><li>计算机底层在保存时间时使用都是时间戳</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1.输出</span>
<span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2.</span>
<span class="token keyword">var</span> d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">18</span><span class="token operator">/</span><span class="token number">2011</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">)</span>
<span class="token comment">//3.</span>
<span class="token keyword">var</span> date <span class="token operator">=</span> d2<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//4.</span>
<span class="token keyword">var</span> day <span class="token operator">=</span> d2<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//5.</span>
<span class="token keyword">var</span> month <span class="token operator">=</span> d2<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//6.</span>
<span class="token keyword">var</span> year <span class="token operator">=</span> d2<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//7.</span>
<span class="token keyword">var</span> time <span class="token operator">=</span> d2<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>利用时间戳来测试代码的执行的性能</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//获取当前时间戳</span>
<span class="token keyword">var</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> end <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;执行了：&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;毫秒&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、math-数学" tabindex="-1"><a class="header-anchor" href="#四、math-数学" aria-hidden="true">#</a> 四、Math（数学）</h2><p>Math和其他的对象不同，它不是一个构造函数，它属于一个工具类不用创建对象，它里边封装了数学运算相关的属性和方法</p><p>比如：Math.PI 表示的圆周率</p><p>1.abs()：可以用来计算一个数的绝对值</p><p>2.Math.ceil()：可以对一个数进行向上取整，小数位只有有值就自动进1</p><p>3.Math.floor()：可以对一个数进行向下取整，小数部分会被舍掉</p><p>4.Math.round()：可以对一个数进行四舍五入取整</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1.99</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1.4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.Math.random()</p><ul><li><p>可以用来生成一个0-1之间的随机数</p></li><li><p>生成一个0-10的随机数</p></li><li><p>生成一个0-x之间的随机数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>生成一个x-y之间的随机数</p></li></ul><p>6.max() 可以获取多个数中的最大值</p><p>7.min() 可以获取多个数中的最小值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>8.Math.pow(x,y)：返回x的y次幂</p><p>9.Math.sqrt()：用于对一个数进行开方运算</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,57),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","day5.html.vue"]]);export{r as default};
